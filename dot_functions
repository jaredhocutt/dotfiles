#!/usr/bin/env bash

bw-session() {
  export BW_SESSION=$(bw unlock --raw)
}

pubkey() {
  if [ "$(uname)" = "Darwin" ]; then
    cat ~/.ssh/id_rsa.pub | pbcopy
  else
    cat ~/.ssh/id_rsa.pub | xclip -selection clipboard
  fi

  cat ~/.ssh/id_rsa.pub
}

lets_encrypt_cert() {
  mkdir -p $(pwd)/letsencrypt/{config,work,logs}

  certbot certonly \
    --config-dir $(pwd)/letsencrypt/config \
    --work-dir $(pwd)/letsencrypt/work \
    --logs-dir $(pwd)/letsencrypt/logs \
    --agree-tos \
    --dns-route53 \
    --dns-route53-propagation-seconds 45 \
    --server https://acme-v02.api.letsencrypt.org/directory
}

vault_passphrase() {
  pwgen --capitalize --numerals --secure 200 1 | head -n1 | gpg --armor --recipient jaredhocutt@gmail.com --encrypt --output vault_passphrase.gpg
}

vault_passphrase_decrypt() {
  gpg --batch --use-agent --decrypt vault_passphrase.gpg
}

venv_selinux() {
  for i in $(ls /usr/lib64/python3.*/site-packages | grep selinux); do
    ln -s /usr/lib64/python3.*/site-packages/${i} ${VIRTUAL_ENV}/lib64/python3.*/site-packages/
  done
}

reboot_windows() {
  sudo grub2-reboot "$(sudo grep -i windows /boot/grub2/grub.cfg | cut -d"'" -f2)"
  reboot
}

openshift_download() {
  if [ $# -ne 1 ]
  then
    echo "Usage: `basename $0` OPENSHIFT_VERSION"
    return
  fi

  if [ "$(uname)" = "Darwin" ]
  then
    client_os="mac"

    #if [ "$(uname -m)" = "arm64" ]
    #then
    #  client_os="${client_os}-arm64"
    #fi
  else
    client_os="linux"
  fi

  openshift_version_parts=( $(echo "${1}" | tr "." "\n") )

  if [ ${#openshift_version_parts[@]} -eq 2 ]
  then
    wget http://mirror.openshift.com/pub/openshift-v4/clients/ocp/stable-${1}/openshift-install-${client_os}.tar.gz
    wget http://mirror.openshift.com/pub/openshift-v4/clients/ocp/stable-${1}/openshift-client-${client_os}.tar.gz
  else
    wget http://mirror.openshift.com/pub/openshift-v4/clients/ocp/${1}/openshift-install-${client_os}.tar.gz
    wget http://mirror.openshift.com/pub/openshift-v4/clients/ocp/${1}/openshift-client-${client_os}.tar.gz
  fi

  tar xvf openshift-install-${client_os}.tar.gz openshift-install
  tar xvf openshift-client-${client_os}.tar.gz oc kubectl

  rm -f openshift-install-${client_os}.tar.gz
  rm -f openshift-client-${client_os}.tar.gz
}

video2gif() {
  if [ $# -ne 4 ]
  then
    echo "Usage: `basename $0` INPUT FPS SCALE OUTPUT"
    return
  fi

  ffmpeg -i $1 -vf "fps=$2,scale=$3:-1:flags=lanczos,split[s0][s1];[s0]palettegen[p];[s1][p]paletteuse" -loop 0 $4
}

episode_split() {
  if [ $# -ne 4 ]
  then
    echo "Usage: `basename $0` INPUT START END OUTPUT"
    return
  fi

  ffmpeg -i ${1} -vcodec copy -acodec copy -ss ${2} -to ${3} ${4}
}

dnstoys() {
  dig +noall +answer +additional "$1" @dns.toys
}

